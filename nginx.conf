worker_processes auto;

events {
  worker_connections 1024;
}

http {
  default_type text/html;

  lua_package_path '${prefix}src/?.lua;;';

  gzip on;
  gzip_comp_level 3;

  proxy_cache_path cache/slice levels=1:2 keys_zone=SLICE:20m max_size=16g;
  proxy_cache_path cache/regular levels=1:2 keys_zone=REGULAR:10m max_size=1g;
  proxy_ssl_server_name on;

  map_hash_max_size 262144;
  map_hash_bucket_size 262144;
  map $request_uri $split_cache {
    default REGULAR;

    ~*\.(jpg|jpeg|png|gif|svg|webp|tiff|psd|pdf|eps|ai|indd|raw)$ SLICE;
    ~*\.(mp3|mp4|m4a|m4v|f4v|f4a|m4b|m4r|f4b|mov)$ SLICE;
    ~*\.(3gp|3gp2|3g2|3gpp|3gpp2)$ SLICE;
    ~*\.(ogg|oga|ogv|ogx)$ SLICE;
    ~*\.(wmv|wma|asf)$ SLICE;
    ~*\.webm$ SLICE;
    ~*\.flv$ SLICE;
    ~*\.avi$ SLICE;
    ~*\.(wav|broadcast)$ SLICE;
    ~*\.vob$ SLICE;
    ~*\.(lxf|gxf)$ SLICE;
  }

  server {
    listen 443 ssl http2;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_certificate /etc/letsencrypt/live/pp-cdn.ddns.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/pp-cdn.ddns.net/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; 
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;
    ssl_session_tickets on;

    add_header X-Cache $upstream_cache_status;
    add_header X-Cache-Method $split_cache;

    proxy_cache $split_cache;
    proxy_cache_valid  200 206 301 302 2h;

    proxy_cache_lock on;
    proxy_cache_lock_timeout 0s;
    proxy_cache_lock_age 200s;
    proxy_cache_use_stale updating;

    slice 1m;
    proxy_cache_key $host$uri$is_args$args$slice_range;
    proxy_set_header Range $slice_range;
    proxy_http_version 1.1;

    location / {
      proxy_pass http://dl2.perserver.site/;
    }

    location =/access.log {
      access_log off;
      add_header Content-Type text/plain;
      root logs;
    }

    location =/favicon.ico {
      access_log off;
      return 404;	
    }
  }

  server {
    listen  80;
    return 301  https://$host$request_uri;
  }
}

